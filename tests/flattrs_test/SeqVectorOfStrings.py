# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers


class SeqVectorOfStrings(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsSeqVectorOfStrings(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeqVectorOfStrings()
        x.Init(buf, n + offset)
        return x

    # SeqVectorOfStrings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SeqVectorOfStrings
    def Strings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4)
            )
        return ""

    # SeqVectorOfStrings
    def StringsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0


def SeqVectorOfStringsStart(builder):
    builder.StartObject(1)


def SeqVectorOfStringsAddStrings(builder, strings):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(strings), 0
    )


def SeqVectorOfStringsStartStringsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def SeqVectorOfStringsEnd(builder):
    return builder.EndObject()
