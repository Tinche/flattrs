# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers


class SeqVectorsOfScalars(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsSeqVectorsOfScalars(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeqVectorsOfScalars()
        x.Init(buf, n + offset)
        return x

    # SeqVectorsOfScalars
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SeqVectorsOfScalars
    def VecOfBools(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.BoolFlags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfBoolsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfBoolsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint8s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfUint8sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint8sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint16s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint16Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfUint16sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint16sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint32s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfUint32sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint32sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint64s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfUint64sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfUint64sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt8s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int8Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfInt8sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt8sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt16s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int16Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfInt16sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt16sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt32s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfInt32sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt32sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt64s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfInt64sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfInt64sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfFloat32s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfFloat32sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfFloat32sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorsOfScalars
    def VecOfFloat64s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # SeqVectorsOfScalars
    def VecOfFloat64sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # SeqVectorsOfScalars
    def VecOfFloat64sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0


def SeqVectorsOfScalarsStart(builder):
    builder.StartObject(11)


def SeqVectorsOfScalarsAddVecOfBools(builder, vecOfBools):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfBools), 0
    )


def SeqVectorsOfScalarsStartVecOfBoolsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def SeqVectorsOfScalarsAddVecOfUint8s(builder, vecOfUint8s):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint8s), 0
    )


def SeqVectorsOfScalarsStartVecOfUint8sVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def SeqVectorsOfScalarsAddVecOfUint16s(builder, vecOfUint16s):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint16s), 0
    )


def SeqVectorsOfScalarsStartVecOfUint16sVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)


def SeqVectorsOfScalarsAddVecOfUint32s(builder, vecOfUint32s):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint32s), 0
    )


def SeqVectorsOfScalarsStartVecOfUint32sVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def SeqVectorsOfScalarsAddVecOfUint64s(builder, vecOfUint64s):
    builder.PrependUOffsetTRelativeSlot(
        4, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint64s), 0
    )


def SeqVectorsOfScalarsStartVecOfUint64sVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def SeqVectorsOfScalarsAddVecOfInt8s(builder, vecOfInt8s):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt8s), 0
    )


def SeqVectorsOfScalarsStartVecOfInt8sVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def SeqVectorsOfScalarsAddVecOfInt16s(builder, vecOfInt16s):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt16s), 0
    )


def SeqVectorsOfScalarsStartVecOfInt16sVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)


def SeqVectorsOfScalarsAddVecOfInt32s(builder, vecOfInt32s):
    builder.PrependUOffsetTRelativeSlot(
        7, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt32s), 0
    )


def SeqVectorsOfScalarsStartVecOfInt32sVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def SeqVectorsOfScalarsAddVecOfInt64s(builder, vecOfInt64s):
    builder.PrependUOffsetTRelativeSlot(
        8, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt64s), 0
    )


def SeqVectorsOfScalarsStartVecOfInt64sVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def SeqVectorsOfScalarsAddVecOfFloat32s(builder, vecOfFloat32s):
    builder.PrependUOffsetTRelativeSlot(
        9, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfFloat32s), 0
    )


def SeqVectorsOfScalarsStartVecOfFloat32sVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def SeqVectorsOfScalarsAddVecOfFloat64s(builder, vecOfFloat64s):
    builder.PrependUOffsetTRelativeSlot(
        10, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfFloat64s), 0
    )


def SeqVectorsOfScalarsStartVecOfFloat64sVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def SeqVectorsOfScalarsEnd(builder):
    return builder.EndObject()
